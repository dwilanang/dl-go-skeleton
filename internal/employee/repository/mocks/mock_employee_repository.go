// Code generated by MockGen. DO NOT EDIT.
// Source: employee.repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	model "github.com/dwilanang/psp/internal/employee/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CalculateAttendances mocks base method.
func (m *MockRepository) CalculateAttendances(userID, periodID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateAttendances", userID, periodID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateAttendances indicates an expected call of CalculateAttendances.
func (mr *MockRepositoryMockRecorder) CalculateAttendances(userID, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateAttendances", reflect.TypeOf((*MockRepository)(nil).CalculateAttendances), userID, periodID)
}

// CalculateOvertimePay mocks base method.
func (m *MockRepository) CalculateOvertimePay(userID, periodID int64, baseSalary float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateOvertimePay", userID, periodID, baseSalary)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateOvertimePay indicates an expected call of CalculateOvertimePay.
func (mr *MockRepositoryMockRecorder) CalculateOvertimePay(userID, periodID, baseSalary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateOvertimePay", reflect.TypeOf((*MockRepository)(nil).CalculateOvertimePay), userID, periodID, baseSalary)
}

// CalculateOvertimes mocks base method.
func (m *MockRepository) CalculateOvertimes(userID, periodID int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateOvertimes", userID, periodID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateOvertimes indicates an expected call of CalculateOvertimes.
func (mr *MockRepositoryMockRecorder) CalculateOvertimes(userID, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateOvertimes", reflect.TypeOf((*MockRepository)(nil).CalculateOvertimes), userID, periodID)
}

// CalculateReimburse mocks base method.
func (m *MockRepository) CalculateReimburse(userID, periodID int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateReimburse", userID, periodID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateReimburse indicates an expected call of CalculateReimburse.
func (mr *MockRepositoryMockRecorder) CalculateReimburse(userID, periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateReimburse", reflect.TypeOf((*MockRepository)(nil).CalculateReimburse), userID, periodID)
}

// CountAttendances mocks base method.
func (m *MockRepository) CountAttendances(userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAttendances", userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAttendances indicates an expected call of CountAttendances.
func (mr *MockRepositoryMockRecorder) CountAttendances(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAttendances", reflect.TypeOf((*MockRepository)(nil).CountAttendances), userID)
}

// CountOvertimes mocks base method.
func (m *MockRepository) CountOvertimes(userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountOvertimes", userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountOvertimes indicates an expected call of CountOvertimes.
func (mr *MockRepositoryMockRecorder) CountOvertimes(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountOvertimes", reflect.TypeOf((*MockRepository)(nil).CountOvertimes), userID)
}

// CountReimbursement mocks base method.
func (m *MockRepository) CountReimbursement(userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountReimbursement", userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountReimbursement indicates an expected call of CountReimbursement.
func (mr *MockRepositoryMockRecorder) CountReimbursement(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountReimbursement", reflect.TypeOf((*MockRepository)(nil).CountReimbursement), userID)
}

// CreateAttendance mocks base method.
func (m *MockRepository) CreateAttendance(a *model.Attendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttendance", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAttendance indicates an expected call of CreateAttendance.
func (mr *MockRepositoryMockRecorder) CreateAttendance(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttendance", reflect.TypeOf((*MockRepository)(nil).CreateAttendance), a)
}

// CreateOvertimes mocks base method.
func (m *MockRepository) CreateOvertimes(o *model.Overtime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOvertimes", o)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOvertimes indicates an expected call of CreateOvertimes.
func (mr *MockRepositoryMockRecorder) CreateOvertimes(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOvertimes", reflect.TypeOf((*MockRepository)(nil).CreateOvertimes), o)
}

// CreateReimbursement mocks base method.
func (m *MockRepository) CreateReimbursement(r *model.Reimbursement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReimbursement", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReimbursement indicates an expected call of CreateReimbursement.
func (mr *MockRepositoryMockRecorder) CreateReimbursement(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReimbursement", reflect.TypeOf((*MockRepository)(nil).CreateReimbursement), r)
}

// FetchAttendances mocks base method.
func (m *MockRepository) FetchAttendances(userID int64, limit, offset int) ([]*model.AttendanceItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAttendances", userID, limit, offset)
	ret0, _ := ret[0].([]*model.AttendanceItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAttendances indicates an expected call of FetchAttendances.
func (mr *MockRepositoryMockRecorder) FetchAttendances(userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAttendances", reflect.TypeOf((*MockRepository)(nil).FetchAttendances), userID, limit, offset)
}

// FetchOvertimes mocks base method.
func (m *MockRepository) FetchOvertimes(userID int64, limit, offset int) ([]*model.OvertimeItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOvertimes", userID, limit, offset)
	ret0, _ := ret[0].([]*model.OvertimeItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOvertimes indicates an expected call of FetchOvertimes.
func (mr *MockRepositoryMockRecorder) FetchOvertimes(userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOvertimes", reflect.TypeOf((*MockRepository)(nil).FetchOvertimes), userID, limit, offset)
}

// FetchReimbursement mocks base method.
func (m *MockRepository) FetchReimbursement(userID int64, limit, offset int) ([]*model.ReimbursementItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchReimbursement", userID, limit, offset)
	ret0, _ := ret[0].([]*model.ReimbursementItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchReimbursement indicates an expected call of FetchReimbursement.
func (mr *MockRepositoryMockRecorder) FetchReimbursement(userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchReimbursement", reflect.TypeOf((*MockRepository)(nil).FetchReimbursement), userID, limit, offset)
}

// GetEmployeeByID mocks base method.
func (m *MockRepository) GetEmployeeByID(userID int64) (model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeByID", userID)
	ret0, _ := ret[0].(model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeByID indicates an expected call of GetEmployeeByID.
func (mr *MockRepositoryMockRecorder) GetEmployeeByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeByID", reflect.TypeOf((*MockRepository)(nil).GetEmployeeByID), userID)
}

// GetPayrollByID mocks base method.
func (m *MockRepository) GetPayrollByID(userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayrollByID", userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayrollByID indicates an expected call of GetPayrollByID.
func (mr *MockRepositoryMockRecorder) GetPayrollByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayrollByID", reflect.TypeOf((*MockRepository)(nil).GetPayrollByID), userID)
}

// HasSubmittedAttendance mocks base method.
func (m *MockRepository) HasSubmittedAttendance(userID int64, date time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSubmittedAttendance", userID, date)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSubmittedAttendance indicates an expected call of HasSubmittedAttendance.
func (mr *MockRepositoryMockRecorder) HasSubmittedAttendance(userID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSubmittedAttendance", reflect.TypeOf((*MockRepository)(nil).HasSubmittedAttendance), userID, date)
}

// HasSubmittedOvertime mocks base method.
func (m *MockRepository) HasSubmittedOvertime(userID int64, date time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSubmittedOvertime", userID, date)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSubmittedOvertime indicates an expected call of HasSubmittedOvertime.
func (mr *MockRepositoryMockRecorder) HasSubmittedOvertime(userID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSubmittedOvertime", reflect.TypeOf((*MockRepository)(nil).HasSubmittedOvertime), userID, date)
}
