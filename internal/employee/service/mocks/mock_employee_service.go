// Code generated by MockGen. DO NOT EDIT.
// Source: employee.service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "github.com/dwilanang/psp/internal/employee/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateAttendance mocks base method.
func (m *MockService) CreateAttendance(request *dto.AttendanceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttendance", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAttendance indicates an expected call of CreateAttendance.
func (mr *MockServiceMockRecorder) CreateAttendance(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttendance", reflect.TypeOf((*MockService)(nil).CreateAttendance), request)
}

// CreateOvertime mocks base method.
func (m *MockService) CreateOvertime(request *dto.OvertimeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOvertime", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOvertime indicates an expected call of CreateOvertime.
func (mr *MockServiceMockRecorder) CreateOvertime(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOvertime", reflect.TypeOf((*MockService)(nil).CreateOvertime), request)
}

// CreateReimbursement mocks base method.
func (m *MockService) CreateReimbursement(request *dto.ReimbursementRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReimbursement", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReimbursement indicates an expected call of CreateReimbursement.
func (mr *MockServiceMockRecorder) CreateReimbursement(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReimbursement", reflect.TypeOf((*MockService)(nil).CreateReimbursement), request)
}

// GenerateEmployeePayslip mocks base method.
func (m *MockService) GenerateEmployeePayslip(userID, payrollID int64) (*dto.EmployeePayslip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateEmployeePayslip", userID, payrollID)
	ret0, _ := ret[0].(*dto.EmployeePayslip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateEmployeePayslip indicates an expected call of GenerateEmployeePayslip.
func (mr *MockServiceMockRecorder) GenerateEmployeePayslip(userID, payrollID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateEmployeePayslip", reflect.TypeOf((*MockService)(nil).GenerateEmployeePayslip), userID, payrollID)
}

// GetAttendance mocks base method.
func (m *MockService) GetAttendance(page, limit int) (*dto.AttendanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttendance", page, limit)
	ret0, _ := ret[0].(*dto.AttendanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttendance indicates an expected call of GetAttendance.
func (mr *MockServiceMockRecorder) GetAttendance(page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttendance", reflect.TypeOf((*MockService)(nil).GetAttendance), page, limit)
}

// GetOvertime mocks base method.
func (m *MockService) GetOvertime(page, limit int) (*dto.OvertimeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOvertime", page, limit)
	ret0, _ := ret[0].(*dto.OvertimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOvertime indicates an expected call of GetOvertime.
func (mr *MockServiceMockRecorder) GetOvertime(page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOvertime", reflect.TypeOf((*MockService)(nil).GetOvertime), page, limit)
}

// GetReimbursement mocks base method.
func (m *MockService) GetReimbursement(page, limit int) (*dto.ReimbursementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReimbursement", page, limit)
	ret0, _ := ret[0].(*dto.ReimbursementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReimbursement indicates an expected call of GetReimbursement.
func (mr *MockServiceMockRecorder) GetReimbursement(page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReimbursement", reflect.TypeOf((*MockService)(nil).GetReimbursement), page, limit)
}
