// Code generated by MockGen. DO NOT EDIT.
// Source: admin.service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "github.com/dwilanang/psp/internal/admin/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateAttendancePeriods mocks base method.
func (m *MockService) CreateAttendancePeriods(request *dto.AttendancePeriodRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttendancePeriods", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAttendancePeriods indicates an expected call of CreateAttendancePeriods.
func (mr *MockServiceMockRecorder) CreateAttendancePeriods(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttendancePeriods", reflect.TypeOf((*MockService)(nil).CreateAttendancePeriods), request)
}

// CreatePayrolls mocks base method.
func (m *MockService) CreatePayrolls(request *dto.PayrollRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayrolls", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayrolls indicates an expected call of CreatePayrolls.
func (mr *MockServiceMockRecorder) CreatePayrolls(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayrolls", reflect.TypeOf((*MockService)(nil).CreatePayrolls), request)
}

// GetAttendancePeriods mocks base method.
func (m *MockService) GetAttendancePeriods(page, limit int) (*dto.AttendancePeriodResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttendancePeriods", page, limit)
	ret0, _ := ret[0].(*dto.AttendancePeriodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttendancePeriods indicates an expected call of GetAttendancePeriods.
func (mr *MockServiceMockRecorder) GetAttendancePeriods(page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttendancePeriods", reflect.TypeOf((*MockService)(nil).GetAttendancePeriods), page, limit)
}

// GetPayrolls mocks base method.
func (m *MockService) GetPayrolls(page, limit int) (*dto.PayrollsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayrolls", page, limit)
	ret0, _ := ret[0].(*dto.PayrollsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayrolls indicates an expected call of GetPayrolls.
func (mr *MockServiceMockRecorder) GetPayrolls(page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayrolls", reflect.TypeOf((*MockService)(nil).GetPayrolls), page, limit)
}

// RunPayrolls mocks base method.
func (m *MockService) RunPayrolls(request *dto.PayrollRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPayrolls", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunPayrolls indicates an expected call of RunPayrolls.
func (mr *MockServiceMockRecorder) RunPayrolls(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPayrolls", reflect.TypeOf((*MockService)(nil).RunPayrolls), request)
}

// SummaryPayrolls mocks base method.
func (m *MockService) SummaryPayrolls(request *dto.SummaryPayrollRequest) (*dto.PayrollSummaryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SummaryPayrolls", request)
	ret0, _ := ret[0].(*dto.PayrollSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SummaryPayrolls indicates an expected call of SummaryPayrolls.
func (mr *MockServiceMockRecorder) SummaryPayrolls(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummaryPayrolls", reflect.TypeOf((*MockService)(nil).SummaryPayrolls), request)
}
