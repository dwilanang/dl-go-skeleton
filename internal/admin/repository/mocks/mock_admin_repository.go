// Code generated by MockGen. DO NOT EDIT.
// Source: admin.repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	model "github.com/dwilanang/psp/internal/admin/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CountAttendancePeriods mocks base method.
func (m *MockRepository) CountAttendancePeriods() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAttendancePeriods")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAttendancePeriods indicates an expected call of CountAttendancePeriods.
func (mr *MockRepositoryMockRecorder) CountAttendancePeriods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAttendancePeriods", reflect.TypeOf((*MockRepository)(nil).CountAttendancePeriods))
}

// CountEmployeeByPeriodID mocks base method.
func (m *MockRepository) CountEmployeeByPeriodID(periodID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEmployeeByPeriodID", periodID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEmployeeByPeriodID indicates an expected call of CountEmployeeByPeriodID.
func (mr *MockRepositoryMockRecorder) CountEmployeeByPeriodID(periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEmployeeByPeriodID", reflect.TypeOf((*MockRepository)(nil).CountEmployeeByPeriodID), periodID)
}

// CountPayrolls mocks base method.
func (m *MockRepository) CountPayrolls() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPayrolls")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPayrolls indicates an expected call of CountPayrolls.
func (mr *MockRepositoryMockRecorder) CountPayrolls() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPayrolls", reflect.TypeOf((*MockRepository)(nil).CountPayrolls))
}

// CreateAttendancePeriods mocks base method.
func (m *MockRepository) CreateAttendancePeriods(ap *model.AttendancePeriod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttendancePeriods", ap)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAttendancePeriods indicates an expected call of CreateAttendancePeriods.
func (mr *MockRepositoryMockRecorder) CreateAttendancePeriods(ap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttendancePeriods", reflect.TypeOf((*MockRepository)(nil).CreateAttendancePeriods), ap)
}

// CreatePayrolls mocks base method.
func (m *MockRepository) CreatePayrolls(payroll *model.Payroll) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayrolls", payroll)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayrolls indicates an expected call of CreatePayrolls.
func (mr *MockRepositoryMockRecorder) CreatePayrolls(payroll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayrolls", reflect.TypeOf((*MockRepository)(nil).CreatePayrolls), payroll)
}

// FetchAttendancePeriods mocks base method.
func (m *MockRepository) FetchAttendancePeriods(limit, offset int) ([]*model.AttendancePeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAttendancePeriods", limit, offset)
	ret0, _ := ret[0].([]*model.AttendancePeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAttendancePeriods indicates an expected call of FetchAttendancePeriods.
func (mr *MockRepositoryMockRecorder) FetchAttendancePeriods(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAttendancePeriods", reflect.TypeOf((*MockRepository)(nil).FetchAttendancePeriods), limit, offset)
}

// FetchPayrolls mocks base method.
func (m *MockRepository) FetchPayrolls(limit, offset int) ([]*model.PayrollItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPayrolls", limit, offset)
	ret0, _ := ret[0].([]*model.PayrollItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPayrolls indicates an expected call of FetchPayrolls.
func (mr *MockRepositoryMockRecorder) FetchPayrolls(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPayrolls", reflect.TypeOf((*MockRepository)(nil).FetchPayrolls), limit, offset)
}

// FindAttendancePeriodsByID mocks base method.
func (m *MockRepository) FindAttendancePeriodsByID(id int64) (*model.PeriodInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAttendancePeriodsByID", id)
	ret0, _ := ret[0].(*model.PeriodInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAttendancePeriodsByID indicates an expected call of FindAttendancePeriodsByID.
func (mr *MockRepositoryMockRecorder) FindAttendancePeriodsByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAttendancePeriodsByID", reflect.TypeOf((*MockRepository)(nil).FindAttendancePeriodsByID), id)
}

// FindEmployeeByPeriodID mocks base method.
func (m *MockRepository) FindEmployeeByPeriodID(periodID, limit, offset int64) ([]*model.EmployeePayslip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEmployeeByPeriodID", periodID, limit, offset)
	ret0, _ := ret[0].([]*model.EmployeePayslip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEmployeeByPeriodID indicates an expected call of FindEmployeeByPeriodID.
func (mr *MockRepositoryMockRecorder) FindEmployeeByPeriodID(periodID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEmployeeByPeriodID", reflect.TypeOf((*MockRepository)(nil).FindEmployeeByPeriodID), periodID, limit, offset)
}

// FindPayrollsByID mocks base method.
func (m *MockRepository) FindPayrollsByID(id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPayrollsByID", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPayrollsByID indicates an expected call of FindPayrollsByID.
func (mr *MockRepositoryMockRecorder) FindPayrollsByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPayrollsByID", reflect.TypeOf((*MockRepository)(nil).FindPayrollsByID), id)
}

// GetAttendancePeriodID mocks base method.
func (m *MockRepository) GetAttendancePeriodID(date time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttendancePeriodID", date)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttendancePeriodID indicates an expected call of GetAttendancePeriodID.
func (mr *MockRepositoryMockRecorder) GetAttendancePeriodID(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttendancePeriodID", reflect.TypeOf((*MockRepository)(nil).GetAttendancePeriodID), date)
}

// UpdatePayrolls mocks base method.
func (m *MockRepository) UpdatePayrolls(payroll *model.Payroll) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayrolls", payroll)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePayrolls indicates an expected call of UpdatePayrolls.
func (mr *MockRepositoryMockRecorder) UpdatePayrolls(payroll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayrolls", reflect.TypeOf((*MockRepository)(nil).UpdatePayrolls), payroll)
}

// ValidateAttendancePeriodDate mocks base method.
func (m *MockRepository) ValidateAttendancePeriodDate(startDate, endDate string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAttendancePeriodDate", startDate, endDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAttendancePeriodDate indicates an expected call of ValidateAttendancePeriodDate.
func (mr *MockRepositoryMockRecorder) ValidateAttendancePeriodDate(startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAttendancePeriodDate", reflect.TypeOf((*MockRepository)(nil).ValidateAttendancePeriodDate), startDate, endDate)
}

// ValidatePayroll mocks base method.
func (m *MockRepository) ValidatePayroll(periodID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePayroll", periodID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatePayroll indicates an expected call of ValidatePayroll.
func (mr *MockRepositoryMockRecorder) ValidatePayroll(periodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePayroll", reflect.TypeOf((*MockRepository)(nil).ValidatePayroll), periodID)
}
